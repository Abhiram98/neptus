	private LinkedHashMap miscFilesOpened = new LinkedHashMap();

	private JMenu recentlyOpenFilesMenu = null;

	public final static String RECENTLY_OPENED_MISC     = "conf/romisc.xml";


	public final static short MISC_FILES     = 1;


	/**
	 * This method initializes jMenu	
	 * 	
	 * @return javax.swing.JMenu	
	 */    
	private JMenu getRecentlyOpenFilesMenu() 
	{
		if (recentlyOpenFilesMenu == null) 
		{
			recentlyOpenFilesMenu = new JMenu();
			recentlyOpenFilesMenu.setText("Recently openned");
			RecentlyOpenedFilesUtil.constructRecentlyFilesMenuItems(
			        recentlyOpenFilesMenu, miscFilesOpened);
		}
		else
		{
			RecentlyOpenedFilesUtil.constructRecentlyFilesMenuItems(
			        recentlyOpenFilesMenu, miscFilesOpened);		    
		}
		return recentlyOpenFilesMenu;
	}




// no initialize
		loadRecentlyOpenedFiles(MISC_FILES);




// Comum para todos
    /**
     * @param type
     */
    private void loadRecentlyOpenedFiles(short type)
    {
        String recentlyOpenedFiles;
        Method methodUpdate = null;
        if (type == MISSIONS_FILES)
        {
            recentlyOpenedFiles = ConfigFetch.resolvePath(RECENTLY_OPENED_MISSIONS);
            try
            {
                Class[] params = {File.class};
                methodUpdate = this.getClass().getMethod("updateMissionFilesOpened", params);
            } catch (Exception e)
            {
                ConfigFetch.logPub.error(this + "loadRecentlyOpenedFiles", e);
                return;
            }
        }
        else if (type == MAPS_FILES)
        {
            recentlyOpenedFiles = ConfigFetch.resolvePath(RECENTLY_OPENED_MAPS);
            try
            {
                Class[] params = {File.class};
                methodUpdate = this.getClass().getMethod("updateMapFilesOpened", params);
            } catch (Exception e)
            {
                ConfigFetch.logPub.error(this + "loadRecentlyOpenedFiles", e);
                return;
            }
        }
        else
        {
            recentlyOpenedFiles = ConfigFetch.resolvePath(RECENTLY_OPENED_MISC);
            try
            {
                Class[] params = {File.class};
                methodUpdate = this.getClass().getMethod("updateMiscFilesOpened", params);
            } catch (Exception e)
            {
                ConfigFetch.logPub.error(this + "loadRecentlyOpenedFiles", e);
                return;
            }
        }
        if (recentlyOpenedFiles == null)
        {
            //JOptionPane.showInternalMessageDialog(this, "Cannot Load")
            return;
        }

        if (!new File(recentlyOpenedFiles).exists())
            return;
        
        RecentlyOpenedFilesUtil.loadRecentlyOpenedFiles(recentlyOpenedFiles,
                methodUpdate, this);
    }
    

// Comum para todos
    /**
     * @param type
     */
    private void storeRecentlyOpenedFiles(short type)
    {
        String recentlyOpenedFiles;
        LinkedHashMap hMap;
        String header;
        if (type == MISSIONS_FILES)
        {
            recentlyOpenedFiles = ConfigFetch.resolvePathBasedOnConfigFile(RECENTLY_OPENED_MISSIONS);
            hMap = missionFilesOpened;
            header = "Recently opened mission files.";
        }
        else if (type == MAPS_FILES)
        {
            recentlyOpenedFiles = ConfigFetch.resolvePathBasedOnConfigFile(RECENTLY_OPENED_MAPS);
            hMap = mapFilesOpened;
            header = "Recently opened map files.";
        }
        else
        {
            recentlyOpenedFiles = ConfigFetch.resolvePathBasedOnConfigFile(RECENTLY_OPENED_MISC);
            hMap = miscFilesOpened;
            header = "Recently opened misc files.";
        }
        RecentlyOpenedFilesUtil.storeRecentlyOpenedFiles(
                recentlyOpenedFiles, hMap, header);
    }





    /**
     * @param fx
     * @return
     */
    public boolean updateMiscFilesOpened(File fx)
    {
        //updateFilesOpenedWorker
        RecentlyOpenedFilesUtil.updateFilesOpenedMenuItems(fx, miscFilesOpened,
                new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent e)
                    {
                        File fx;
                        Object key = e.getSource();
                        Object value = miscFilesOpened.get(key);
                        if (value instanceof File)
                        {
                            fx = (File) value;
                            openMiscTypeFile(fx);
                        } else
                            return;
                    }
                });
        getRecentlyOpenFilesMenu();
        storeRecentlyOpenedFiles(MISC_FILES);
        return true;
    }



	/**
     * @param fx
     */
    protected void openMiscTypeFile(File fx)
    {
	    if (fx == null)
	        return;
		if (!fx.exists())
		{
		    JOptionPane.showMessageDialog(editFileMenuItem,
                        "The file doesn't exists!");
		    return;
		}
		if (fx.isDirectory())
		{
		    JOptionPane.showMessageDialog(editFileMenuItem,
                        "Cannot edit a directory!");
		    return;
		}
		updateMiscFilesOpened(fx);
		EditorLauncher ed = new EditorLauncher();
		short edType = ed.TEXT_EDITOR_TYPE;
        boolean rsb = ed.editFile(fx.getAbsolutePath(),
                edType, false);
    }

