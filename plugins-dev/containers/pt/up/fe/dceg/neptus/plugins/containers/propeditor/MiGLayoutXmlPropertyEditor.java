/*
 * Copyright (c) 2004-2013 Universidade do Porto - Faculdade de Engenharia
 * Laboratório de Sistemas e Tecnologia Subaquática (LSTS)
 * All rights reserved.
 * Rua Dr. Roberto Frias s/n, sala I203, 4200-465 Porto, Portugal
 *
 * This file is part of Neptus, Command and Control Framework.
 *
 * Commercial Licence Usage
 * Licencees holding valid commercial Neptus licences may use this file
 * in accordance with the commercial licence agreement provided with the
 * Software or, alternatively, in accordance with the terms contained in a
 * written agreement between you and Universidade do Porto. For licensing
 * terms, conditions, and further information contact lsts@fe.up.pt.
 *
 * European Union Public Licence - EUPL v.1.1 Usage
 * Alternatively, this file may be used under the terms of the EUPL,
 * Version 1.1 only (the "Licence"), appearing in the file LICENCE.md
 * included in the packaging of this file. You may not use this work
 * except in compliance with the Licence. Unless required by applicable
 * law or agreed to in writing, software distributed under the Licence is
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the Licence for the specific
 * language governing permissions and limitations at
 * https://www.lsts.pt/neptus/licence.
 *
 * For more information please see <http://lsts.fe.up.pt/neptus>.
 *
 * Author: pdias
 * 5 de Out de 2010
 */
package pt.up.fe.dceg.neptus.plugins.containers.propeditor;

import pt.up.fe.dceg.neptus.gui.editor.XMLPropertyEditor;
import pt.up.fe.dceg.neptus.i18n.I18n;
import pt.up.fe.dceg.neptus.util.GuiUtils;

/**
 * @author pdias
 *
 */
public class MiGLayoutXmlPropertyEditor extends XMLPropertyEditor {

	public MiGLayoutXmlPropertyEditor() {
		super();
		rootElement = "MiGLayout Layout XML";
		title = I18n.text("Layout for: MiGLayout Layout XML");
		smallMsg = I18n.text("This follows the MiGLayout");
	    contentType = "text/html";
	    helpText = "<html>";
	    helpText += "<head>";
//	    helpText += "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n"; // only works without this line
	    helpText += "    \r\n"; 
	    helpText += "    <title>MiG Layout Container Help</title>\r\n"; 
	    helpText += "    <style type=\"text/css\">\r\n"; 
	    helpText += "    <!--\r\n"; 
	    helpText += "        td p { font-family: \"Verdana\", \"Arial\", \"Helvetica\", sans-serif; font-size: 10pt }\r\n"; 
	    helpText += "        p { font-family: \"Verdana\", \"Arial\", \"Helvetica\", sans-serif; font-size: 10pt }\r\n"; 
	    helpText += "        h1 { background: #bbbbbb; border: none; padding: 0in; color: #ffffff; font-family: \"Geneva\", \"Arial\", \"Helvetica\", sans-serif; font-size: 16pt }\r\n"; 
	    helpText += "        h2 { background: #bbbbbb; border: none; padding: 0in; color: #ffffff; font-family: \"Geneva\", \"Arial\", \"Helvetica\", sans-serif; font-size: 14pt }\r\n"; 
	    helpText += "        code { font-family: \"Courier New\", \"Courier\", \"mono\"; font-size: 11pt }\r\n"; 
	    helpText += "    -->\r\n"; 
	    helpText += "    </style>\r\n"; 
	    helpText += "    <style type=\"text/css\"></style>";
	    helpText += "</head>\r\n"; 
	    helpText += "<body lang=\"en\">\r\n"; 
	    helpText += "<h1>MiG Layout Container Help</h1>\r\n";
	    helpText += "<h2>MiG Layout Container Example</h2>\r\n";
	    helpText += "<code>";
	    helpText += "&lt;profiles><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&lt;profile name=\"Normal\"><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&lt;container layoutparam=\"ins 0\" param=\"w 100%, h 100%\"><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;child name=\"Map Panel\" param=\"w 100%, h 100%\"/><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&lt;/container><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&lt;container layoutparam=\"ins 3\" param=\"w 300px!, h 100%\"><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;container layoutparam=\"ins 0, filly\" param=\"w 100%, h 100%\"><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;child name=\"Plan Control\" param=\"w 80%, h 50px!\"/><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;child name=\"Abort Button\" param=\"w 20%, h 50px!, wrap\"/><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;child name=\"Plan Control State\" param=\"w 100%, h 125px!, wrap, span 2 \"/><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;child name=\"Mission Tree\" param=\"w 100%, h 100%, span 2\"/><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/container><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&lt;/container><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&lt;/profile><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&lt;profile name=\"Planning\"><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&lt;container layoutparam=\"ins 0, fillx, filly\" param=\"w 100%, h 100%\"><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;child name=\"Map Panel\" param=\"w 100%, h 100%, growy\"/><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&lt;/container><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&lt;container param=\"w 350::, growy\" layoutparam=\"ins 0\"><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;child name=\"Mission Tree\" param=\"w 100%, growy, wrap\"/><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;child name=\"Log Book Panel\" param=\"w 100%, wrap\"/><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;child name=\"Edit operational limits\" param=\"w 100%, wrap\"/><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;child name=\"Systems List\" param=\"w 100%, h 10%::30%\"/><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&lt;/container><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&lt;/profile><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&lt;profile name=\"Planning Full\"><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&lt;container layoutparam=\"ins 0, fill\" param=\"w max(100%,2000), h 100%, growx\"><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;child name=\"Map Panel\" param=\"w 100%, h 100%, grow, wrap\"/><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;child name=\"Log Book Panel\" param=\"w 100%, h 50px, grow\"/><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&nbsp;&nbsp;&lt;/container><br/>\r\n"; 
	    helpText += "&nbsp;&nbsp;&lt;/profile><br/>\r\n"; 
	    helpText += "&lt;/profiles>";
	    helpText += "</code>";
	    helpText += "<h2>MiG Layout Cheat Sheet</h2>\r\n"; 
	    helpText += "<p><em><strong>Note!</strong></em><em> Italics is used to denote an\r\n"; 
	    helpText += "argument. Square brackets are used to indicate an optional\r\n"; 
	    helpText += "argument.</em><br><br><strong>UnitValue</strong> A value that\r\n"; 
	    helpText += "represents a size. Normally it consist of a value (integer or float)\r\n"; 
	    helpText += "and the unit type (e.g. <code>\"mm\"</code>). MigLayout\r\n"; 
	    helpText += "support defining custom unit types and there are some special ones\r\n"; 
	    helpText += "built in. These are listed below and some have a context to which\r\n"; 
	    helpText += "they can appear. UnitValues can be quite rich expressions, like:\r\n"; 
	    helpText += "<code>\"(10px + 0.25*((pref/2)-10))\"</code>.\r\n"; 
	    helpText += "</p>\r\n"; 
	    helpText += "<p>The currently supported unit types are:\r\n"; 
	    helpText += "</p>\r\n"; 
	    helpText += "<ul>\r\n"; 
	    helpText += "    <li><p style=\"margin-bottom: 0in\"><strong>\"\"</strong> - No\r\n"; 
	    helpText += "    unit specified. This is the default unit and pixels will be used by\r\n"; 
	    helpText += "    default. Default unit can be set with\r\n"; 
	    helpText += "    <code>PlatformDefaults.setDefaultHorizontal/VerticalUnit(int)</code>. E.g. <code>\"10\"</code>\r\n"; 
	    helpText += "        </p>\r\n"; 
	    helpText += "    </li><li><p style=\"margin-bottom: 0in\"><strong>px</strong> - Pixels.\r\n"; 
	    helpText += "    Normal pixels mapped directly to the screen. E.g. <code>\"10px\"\r\n"; 
	    helpText += "    or \"10\"</code>\r\n"; 
	    helpText += "    </p>\r\n"; 
	    helpText += "    </li><li><p style=\"margin-bottom: 0in\"><strong>%</strong> - A percentage\r\n"; 
	    helpText += "    of the container's size. May also be used for alignments where for\r\n"; 
	    helpText += "    instance <code>50%</code> means \"centered\". E.g. <code>\"100%\"</code>\r\n"; 
	    helpText += "        </p>\r\n"; 
	    helpText += "    </li><li><p style=\"margin-bottom: 0in\"><strong>lp</strong> - Logical\r\n"; 
	    helpText += "    Pixels. If the normal font is used on the platform this maps 1:1 to\r\n"; 
	    helpText += "    pixels. If larger fonts are used the logical pixels gets\r\n"; 
	    helpText += "    proportionally larger. Used instead of Dialog Units. E.g. <code>\"10lp\"</code>\r\n"; 
	    helpText += "        </p>\r\n"; 
	    helpText += "    </li><li><p style=\"margin-bottom: 0in\"><strong>pt</strong> - Points.\r\n"; 
	    helpText += "    1/72:th of an inch. A unit normally used for printing. Will take the\r\n"; 
	    helpText += "    screen DPI that the component is showing on into account. E.g.\r\n"; 
	    helpText += "    <code>\"10pt\"</code>\r\n"; 
	    helpText += "    </p>\r\n"; 
	    helpText += "    </li><li><p style=\"margin-bottom: 0in\"><strong>mm</strong> - Millimeters.\r\n"; 
	    helpText += "    Will take the screen DPI that the component is showing on into\r\n"; 
	    helpText += "    account. E.g. <code>\"10mm\"</code>\r\n"; 
	    helpText += "    </p>\r\n"; 
	    helpText += "    </li><li><p style=\"margin-bottom: 0in\"><strong>cm</strong> - Centimeters.\r\n"; 
	    helpText += "    Will take the screen that the component is showing on DPI into\r\n"; 
	    helpText += "    account. E.g. <code>\"10cm\"</code>\r\n"; 
	    helpText += "    </p>\r\n"; 
	    helpText += "    </li><li><p style=\"margin-bottom: 0in\"><strong>in</strong> - Inches. Will\r\n"; 
	    helpText += "    take the screen DPI that the component is showing on into account.\r\n"; 
	    helpText += "    E.g. <code>\"10.4in\"</code>\r\n"; 
	    helpText += "    </p>\r\n"; 
	    helpText += "    </li><li><p style=\"margin-bottom: 0in\"><strong>sp</strong> - Percentage\r\n"; 
	    helpText += "    of the screen. Will take the pixel screen size that the component is\r\n"; 
	    helpText += "    showing on into account. <code>100.0</code> is the right/bottom edge\r\n"; 
	    helpText += "    of the screen. E.g. <code>\"sp 70\" or \"sp 73.627123\"</code>\r\n"; 
	    helpText += "        </p>\r\n"; 
	    helpText += "    </li><li><p style=\"margin-bottom: 0in\"><strong>al</strong> - Visual\r\n"; 
	    helpText += "    bounds alignment. <code>\"0al\"</code> is left aligned,\r\n"; 
	    helpText += "    <code>\"0.5al\"</code> is centered and <code>\"1al\"</code>\r\n"; 
	    helpText += "    is right aligned. This unit is used with absolute positioning. E.g.\r\n"; 
	    helpText += "    <code>\"0.2al\"</code>\r\n"; 
	    helpText += "    </p>\r\n"; 
	    helpText += "    </li><li><p><strong>n/null</strong> - Null value. Denotes the absence of\r\n"; 
	    helpText += "    a value. E.g. <code>\"n\" or \"null\"</code>\r\n"; 
	    helpText += "    </p>\r\n"; 
	    helpText += "</li></ul>\r\n"; 
	    helpText += "<p>These are the unit values that are converted to pixels by the\r\n"; 
	    helpText += "default <code>PlatformConverter</code>. The converted pixel sizes can\r\n"; 
	    helpText += "be different for the vertical and horizontal dimension.\r\n"; 
	    helpText += "</p>\r\n"; 
	    helpText += "<ul>\r\n"; 
	    helpText += "    <li><p style=\"margin-bottom: 0in\"><strong>r/rel/related</strong> -\r\n"; 
	    helpText += "    Indicates that two components or columns/rows are considered\r\n"; 
	    helpText += "    related. The exact pixel size is determined by the platform default.\r\n"; 
	    helpText += "    E.g. <code>\"r\" or \"related\"</code>\r\n"; 
	    helpText += "    </p>\r\n"; 
	    helpText += "    </li><li><p style=\"margin-bottom: 0in\"><strong>u/unrel/unrelatedated</strong>\r\n"; 
	    helpText += "    - Indicates that two components or columns/rows are considered\r\n"; 
	    helpText += "    <strong>un</strong>related. The exact pixel size is determined by\r\n"; 
	    helpText += "    the platform default. E.g. <code>\"u\" or \"unrelated\"</code>\r\n"; 
	    helpText += "        </p>\r\n"; 
	    helpText += "    </li><li><p style=\"margin-bottom: 0in\"><strong>p/para/paragraph</strong>\r\n"; 
	    helpText += "    - A spacing that is considered appropriate for a paragraph is used.\r\n"; 
	    helpText += "    The exact pixel size is determined by the platform default. E.g.\r\n"; 
	    helpText += "    <code>\"para\" or \"paragraph\"</code>\r\n"; 
	    helpText += "    </p>\r\n"; 
	    helpText += "    </li><li><p><strong>i/ind/indent</strong> - A spacing that is considered\r\n"; 
	    helpText += "    appropriate for indent. The exact pixel size is determined by the\r\n"; 
	    helpText += "    platform default. E.g. <code>\"i\" or \"indent\"</code>\r\n"; 
	    helpText += "        </p>\r\n"; 
	    helpText += "</li></ul>\r\n"; 
	    helpText += "<p>These are the unit values that can be specified as a reference to\r\n"; 
	    helpText += "component(s) sizes. These can<strong> </strong>be used on column/row\r\n"; 
	    helpText += "constraint's size and as a reference in component constaint\r\n"; 
	    helpText += "expressions.\r\n"; 
	    helpText += "</p>\r\n"; 
	    helpText += "<ul>\r\n"; 
	    helpText += "    <li><p style=\"margin-bottom: 0in\"><strong>min/minimum</strong> - A\r\n"; 
	    helpText += "    reference to the <strong>largest</strong> minimum size of the\r\n"; 
	    helpText += "    column/row. E.g. <code>\"min\" or \"minimum\"</code>\r\n"; 
	    helpText += "        </p>\r\n"; 
	    helpText += "    </li><li><p style=\"margin-bottom: 0in\"><strong>p/pref/preferred</strong>\r\n"; 
	    helpText += "    - A reference to the <strong>largest</strong> preferred size of the\r\n"; 
	    helpText += "    column/row. E.g. <code>\"p\" or \"pref\" or\r\n"; 
	    helpText += "    \"preferred\"</code>\r\n"; 
	    helpText += "    </p>\r\n"; 
	    helpText += "    </li><li><p><strong>max/maximum</strong> - A reference to the <strong>smallest</strong>\r\n"; 
	    helpText += "    maximum size of the column/row. E.g. <code>\"max\" or\r\n"; 
	    helpText += "    \"maximum\"</code>\r\n"; 
	    helpText += "    </p>\r\n"; 
	    helpText += "</li></ul>\r\n"; 
	    helpText += "<p>These are the unit values that can be specified for a component's\r\n"; 
	    helpText += "width. These can <strong>only</strong> be used on the <strong>width</strong>\r\n"; 
	    helpText += "component constraints size.\r\n"; 
	    helpText += "</p>\r\n"; 
	    helpText += "<ul>\r\n"; 
	    helpText += "    <li><p><strong>button</strong> - A reference to the platform minimum\r\n"; 
	    helpText += "    size for a button. E.g. <code>\"wmin button\"</code>\r\n"; 
	    helpText += "    </p>\r\n"; 
	    helpText += "</li></ul>\r\n"; 
	    helpText += "<p><strong>BoundSize</strong> A bound size is a size that optionally\r\n"; 
	    helpText += "has a lower and/or upper bound and consists of one to three Unit\r\n"; 
	    helpText += "Values. Practically it is a minimum/preferred/maximum size\r\n"; 
	    helpText += "combination but none of the sizes are actually mandatory. If a size\r\n"; 
	    helpText += "is missing (e.g. the preferred) it is <strong>null</strong> and will\r\n"; 
	    helpText += "be replaced by the most appropriate value. For components this value\r\n"; 
	    helpText += "is the corresponding size (E.g. <code>Component.getPreferredSize()</code>\r\n"; 
	    helpText += "on Swing) and for columns/rows it is the size of the components in\r\n"; 
	    helpText += "the row (see <strong>min</strong>/<strong>pref</strong>/<strong>max</strong>\r\n"; 
	    helpText += "in <strong>UnitValue</strong> above).</p>\r\n"; 
	    helpText += "<p>The format is <code>\"</code><code><em>min</em></code><code>:</code><code><em>preferred</em></code><code>:</code><code><em>max</em></code><code>\"</code>,\r\n"; 
	    helpText += "however there are shorter versions since for instance it is seldom\r\n"; 
	    helpText += "needed to specify the maximum size.\r\n"; 
	    helpText += "</p>\r\n"; 
	    helpText += "<p>A single value (E.g. <code>\"10\"</code>) sets only the\r\n"; 
	    helpText += "<em><code>preferred</code></em> size and is exactly the same as\r\n"; 
	    helpText += "<code>\"null:10:null\"</code> and <code>\":10:\"</code>\r\n"; 
	    helpText += "and <code>\"n:10:n\"</code>.<br>Two values (E.g. <code>\"10:20\"</code>)\r\n"; 
	    helpText += "means minimum and preferred size and is exactly the same as\r\n"; 
	    helpText += "<code>\"10:20:null\"</code> and <code>\"10:20:\"</code>\r\n"; 
	    helpText += "and <code>\"10:20:n\"</code> <br>The use a of an exclamation\r\n"; 
	    helpText += "mark (E.g. <code>\"20!\"</code>) means that the value should\r\n"; 
	    helpText += "be used for all size types and no colon may then be used in the\r\n"; 
	    helpText += "string. It is the same as <code>\"20:20:20\"</code>.\r\n"; 
	    helpText += "</p>\r\n"; 
	    helpText += "<p><strong>push</strong> can be appended to a gap to make that gap\r\n"; 
	    helpText += "\"greedy\" and take any left over space. This means that a\r\n"; 
	    helpText += "gap that has <code>\"push\"</code> will be pushing the\r\n"; 
	    helpText += "components/rows/columns apart, taking as much space as possible for\r\n"; 
	    helpText += "the gap. The gap push is always an addition to a <strong>BoundSize</strong>.\r\n"; 
	    helpText += "E.g. <code>\"gap rel:push\"</code>, <code>\"[][]push[][]\"</code>,\r\n"; 
	    helpText += "<code>\"10cm!:push\"</code> or <code>\"10:10:10:push\"</code>.\r\n"; 
	    helpText += "</p>\r\n"; 
	    helpText += "<p><strong>Note!</strong> For row/column constraints the <strong>minimum</strong>,\r\n"; 
	    helpText += "<strong>preferred</strong> and <strong>maximum</strong> keywords can\r\n"; 
	    helpText += "be used and they refer to the largest minimum, preferred and maximum\r\n"; 
	    helpText += "component in the column/row. A <code>null</code> value is the same\r\n"; 
	    helpText += "thing as any of these constraints, for the indicated position, but\r\n"; 
	    helpText += "they can for instance be used to set the minimum size to the\r\n"; 
	    helpText += "preferred one or the other way around. E.g. <code>\"pref:pref\"</code>\r\n"; 
	    helpText += "or <code>\"min:min:pref\"</code>.</p>\r\n"; 
	    helpText += "<p><strong>AlignKeyword</strong><br>For alignment purposes these\r\n"; 
	    helpText += "keywords can be used: <strong>t/top</strong>, <strong>l/left</strong>,\r\n"; 
	    helpText += "<strong>b/bottom</strong>, <strong>r/right</strong>, <strong>lead/leading</strong>,\r\n"; 
	    helpText += "<strong>trail/trailing</strong> and <strong>base/baseline</strong>.\r\n"; 
	    helpText += "Leading/trailing is dependant on if component orientation is\r\n"; 
	    helpText += "\"left-to-right\" or \"right-to-left\". There is also\r\n"; 
	    helpText += "a keyword <code>\"align label\"</code> or for columns/rows\r\n"; 
	    helpText += "one need only to use \"<code>label\". </code>It will align\r\n"; 
	    helpText += "the component(s), which is normally labels, left, center or right\r\n"; 
	    helpText += "depending on the style guides for the platform. This currently means\r\n"; 
	    helpText += "left justfied on all platforms except OS X which has right justified\r\n"; 
	    helpText += "labels.</p>\r\n"; 
	    helpText += "<h2>Layout Constraints</h2>\r\n"; 
	    helpText += "<p style=\"margin-bottom: 0in\">Layout constraings and normally set in\r\n"; 
	    helpText += "the constructor of MigLayout and is constraints that will affect the\r\n"; 
	    helpText += "whole container.<br>&nbsp;\r\n"; 
	    helpText += "</p>\r\n"; 
	    helpText += "<table width=\"100%\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\r\n"; 
	    helpText += "    <tbody><tr>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>wrap</u></strong></code><code> [</code><code><em>count</em></code><code>]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Sets auto-wrap mode for the layout. This means that the grid\r\n"; 
	    helpText += "            will wrap to a new column/row after a certain number of columns\r\n"; 
	    helpText += "            (for horizontal flow) or rows (for vertical flow). The number is\r\n"; 
	    helpText += "            either specified as an integer after the keyword or if not, the\r\n"; 
	    helpText += "            number of column/row constraints specified will be used. A\r\n"; 
	    helpText += "            wrapping layout means that after the <code>count</code>:th\r\n"; 
	    helpText += "            component has been added the layout will wrap and continue on the\r\n"; 
	    helpText += "            next row/column. If wrap is turned off (default) the Component\r\n"; 
	    helpText += "            Constraint's <code>\"wrap\"</code> and <code>\"newline\"</code>\r\n"; 
	    helpText += "            can be used to control wrapping.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"wrap\"<br>\"wrap 4\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>gap</u></strong></code><code> </code><code><em>gapx</em></code><code>\r\n"; 
	    helpText += "            [</code><code><em>gapy</em></code><code>]<br></code><code><strong><u>gapx</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>gap</em></code><code><br></code><code><strong><u>gapy</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>gap</em></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Specifies the default gap between the cells in the grid and are\r\n"; 
	    helpText += "            thus overriding the platform default value. The gaps are specified\r\n"; 
	    helpText += "            as a <strong>BoundSize</strong>. See above.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"gap 5px 10px\"<br>\"gap unrel rel\"<br>\"gapx 10::50\"<br>\"gapy\r\n"; 
	    helpText += "            0:rel:null\"<br>\"gap 10! 10!\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>debug</u></strong></code><code> [</code><code><em>millis</em></code><code>]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Turns on debug painting for the container. This will lead to an\r\n"; 
	    helpText += "            active repaint every <code>millis</code> milliseconds. Default\r\n"; 
	    helpText += "            value is 1000 (once every second).\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"debug\"<br>\"debug 4000\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>nogrid</u></strong></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Puts the layout in a flow-only mode. All components in the flow\r\n"; 
	    helpText += "            direction will be put in the same cell and will thus not be\r\n"; 
	    helpText += "            aligned with component in other rows/columns. For normal\r\n"; 
	    helpText += "            horizontal flow this is the same as to say that all component will\r\n"; 
	    helpText += "            be put in the first and only column.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"nogrid\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>novisualpadding</u></strong></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Turns off padding of visual bounds (e.g. compensation for drop\r\n"; 
	    helpText += "            shadows)</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"novisualpadding\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>fill<br>fillx</u></strong></code><code><br></code><code><strong><u>filly</u></strong></code>\r\n"; 
	    helpText += "                        </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Claims all available space in the container for the columns and/or rows. At least one component need to have a <code>\"grow\"</code> constaint for it to fill the container. The space will be divided equal, though honoring <code>\"growpriority\"</code>. If no columns/rows has <code>\"grow\"</code> set the grow weight of the componets in the rows/columns will migrate to that row/column.</p>\r\n"; 
	    helpText += "      </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>\"<code>fill\"<br>\"fillx\"<br>\"filly\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>ins/insets</u></strong></code><code>\r\n"; 
	    helpText += "            <br>[\"dialog\"]<br>[\"panel\"]<br>[</code><code><em>top/all</em></code><code>\r\n"; 
	    helpText += "            [</code><code><em>left</em></code><code>] <br>[</code><code><em>bottom</em></code><code>]\r\n"; 
	    helpText += "            [</code><code><em>right</em></code><code>]]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Specified the insets for the laid out container. The gaps\r\n"; 
	    helpText += "            before/after the first/last column/row overrides these layout\r\n"; 
	    helpText += "            insets. This is the same thing as setting an <code>EmptyBorder</code>\r\n"; 
	    helpText += "            on the container but without removing any border already there.\r\n"; 
	    helpText += "            Default value is <code>\"panel\"</code> (or zero if there\r\n"; 
	    helpText += "            are docking components). The size of <code>\"dialog\"</code>\r\n"; 
	    helpText += "            and <code>\"panel\"</code> insets is returned by the\r\n"; 
	    helpText += "            current <code>PlatformConverter</code>. The inset values all\r\n"; 
	    helpText += "            around can also be set explicitly for one or more sides. Insets on\r\n"; 
	    helpText += "            sides that are set to <code>\"null\"</code> or <code>\"n\"</code>\r\n"; 
	    helpText += "            will get the default values provided by the <code>PlatformConverter</code>.\r\n"; 
	    helpText += "            If less than four sides are specified the last value will be used\r\n"; 
	    helpText += "            for the remaining side. The gaps are specified as a <strong>UnitValue</strong>.\r\n"; 
	    helpText += "            See above. Note that the default insets is \"<code>panel</code>\"\r\n"; 
	    helpText += "                        </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"insets dialog\"<br>\"ins 0\"<br>\r\n"; 
	    helpText += "            \"insets\r\n"; 
	    helpText += "            10px n n n\"<br>\"insets 10 20 30 40\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>flowy</u></strong></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Puts the layout in vertical flow mode. This means that the next\r\n"; 
	    helpText += "            cell is normally below and the next component will be put there\r\n"; 
	    helpText += "            instead of to the right. Default is horizontal flow.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"flowy\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>al/align</u></strong></code><code> </code><code><em>alignx</em></code><code>\r\n"; 
	    helpText += "            [</code><code><em>aligny</em></code><code>]<br></code><code><strong><u>aligny</u></strong></code><code>/</code><code><strong><u>ay</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>align</em></code><code><br></code><code><strong><u>aligny</u></strong></code><code>/</code><code><strong><u>ax</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>align</em></code><code> </code>\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Specifies the alignment for the laid out components as a group.\r\n"; 
	    helpText += "            If the total bounds of all laid out components does not fill the\r\n"; 
	    helpText += "            entire container the align value is used to position the\r\n"; 
	    helpText += "            components within the container without changing their relative\r\n"; 
	    helpText += "            positions. The alignment can be specified as a <strong>UnitValue</strong>\r\n"; 
	    helpText += "            or <strong>AlignKeyword</strong>. See above. If an <strong>AlignKeyword</strong>\r\n"; 
	    helpText += "            is used the <code>\"align\"</code> keyword can be\r\n"; 
	    helpText += "            omitted.<br>Note that baseline alignment does not work since this\r\n"; 
	    helpText += "            is not for single components.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"align 50% 50%\"<br>\"aligny top\"<br>\"alignx\r\n"; 
	    helpText += "            leading\"<br>\"align 100px\"<br>\"top, left\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>ltr</u></strong></code><code><strong>/</strong></code><code><strong><u>lefttoright</u></strong></code><code><strong><br></strong></code><code><strong><u>rtl</u></strong></code><code><strong>/</strong></code><code><strong><u>righttoleft</u></strong></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Overrides the container's <code>ComponentOrientation</code>\r\n"; 
	    helpText += "            property for this layout. Normally this value is dependant on the\r\n"; 
	    helpText += "            <code>Locale</code> that the application is running. This\r\n"; 
	    helpText += "            constraint overrides that value.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"ltr\"<br>\"lefttoright\"<br>\"rtl\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>ttb</u></strong></code><code><strong>/</strong></code><code><strong><u>toptobottom</u></strong></code><code><strong><br></strong></code><code><strong><u>btt</u></strong></code><code><strong>/</strong></code><code><strong><u>bottomtotop</u></strong></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Specifies if the components should be added in the grid\r\n"; 
	    helpText += "            <strong>bottom-to-top</strong> or <strong>top-to-bottom</strong>.\r\n"; 
	    helpText += "            This value is not picked up from the container and is\r\n"; 
	    helpText += "            <strong>top-to-bottom</strong> by default.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"ttb\"<br>\"toptobottom\"<br>\"btt\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>hidemode</u></strong></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Sets the default hide mode for the layout. This hide mode can\r\n"; 
	    helpText += "            be overridden by the component constraint. The hide mode specified\r\n"; 
	    helpText += "            how the layout manager should handle a component that isn't\r\n"; 
	    helpText += "            visible. The modes are:<br><code>0</code> - Default. Means that\r\n"; 
	    helpText += "            invisible components will be handled exactly as if they were\r\n"; 
	    helpText += "            visible.<br><code>1</code> - The size of an invisible component\r\n"; 
	    helpText += "            will be set to <code>0, 0</code>.<br><code>2</code> - The size of\r\n"; 
	    helpText += "            an invisible component will be set to <code>0, 0</code> and the\r\n"; 
	    helpText += "            gaps will also be set to <code>0</code> around it.<br><code>3</code>\r\n"; 
	    helpText += "            - Invisible components will not participate in the layout at all\r\n"; 
	    helpText += "            and it will for instance not take up a grid cell.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"hidemode 1\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>nocache</u></strong></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Instructs the layout engine to not use caches. This should\r\n"; 
	    helpText += "            normally only be needed if the <code>\"%\"</code> unit is\r\n"; 
	    helpText += "            used as it is a function of the parent size. If you are\r\n"; 
	    helpText += "            experiencing revalidation problems you can try to set this\r\n"; 
	    helpText += "            constraint.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"nocache\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "</tbody></table>\r\n"; 
	    helpText += "<h2>Column/Row Constraints</h2>\r\n"; 
	    helpText += "<p>Column and row constraints works the same and hence forth the term\r\n"; 
	    helpText += "<strong>row</strong> will be used for both columns and rows.\r\n"; 
	    helpText += "</p>\r\n"; 
	    helpText += "<p>Every [] section denotes constraints for that row. The gap size\r\n"; 
	    helpText += "between is the gap size dividing the two rows. The format for the\r\n"; 
	    helpText += "constraint is:<br><code>[constraint1, constraint2, ...]gap\r\n"; 
	    helpText += "size[constraint1, constraint2, ...]gap size[...]...\"</code><br><br>Example:\r\n"; 
	    helpText += "<code>\"[fill]10[top,10:20]\"</code>, <code>\"[fill]push[]\"</code>,\r\n"; 
	    helpText += "<code>\"[fill]10:10:100:push[top,10:20]\"</code>.</p>\r\n"; 
	    helpText += "<p><strong>Tip!</strong> A vertical bar <code>\"|\"</code>\r\n"; 
	    helpText += "can be used instead of <code>\"][\"</code> between rows if\r\n"; 
	    helpText += "the default gap should be used. E.g. <code>\"[100|200|300]\"</code>\r\n"; 
	    helpText += "is the same as <code>\"[100][200][300]\"</code>.\r\n"; 
	    helpText += "</p>\r\n"; 
	    helpText += "<p>Gaps are expressed as a <strong>BoundSize</strong> (see above) and\r\n"; 
	    helpText += "can thus have a min/preferred/max size. The size of the row is\r\n"; 
	    helpText += "expressed the same way, as a <strong>BoundSize</strong>. Leaving any\r\n"; 
	    helpText += "of the sizes out will make the size the default one. For gaps this is\r\n"; 
	    helpText += "<code>\"related\"</code> (the pixel size for <code>\"related\"</code>\r\n"; 
	    helpText += "is determined by the <code>PlatformConverter</code>) and for row size\r\n"; 
	    helpText += "this is the largest of the contained components for minimum and\r\n"; 
	    helpText += "preferred size and no maximum size. If there are fewer rows in the\r\n"; 
	    helpText += "format string than there are in the grid cells in that dimension the\r\n"; 
	    helpText += "last gap and row constraint will be used for the extra rows. For\r\n"; 
	    helpText += "instance <code>\"[10]\"</code> is the same as <code>\"[10][10][10]\"</code>\r\n"; 
	    helpText += "(affects wrapping if wrap is turned on though) .</p>\r\n"; 
	    helpText += "<p>Gaps have only their size, however there are number of constraints\r\n"; 
	    helpText += "that can be used between the <code>[ ]</code> and they will affect\r\n"; 
	    helpText += "that row.</p>\r\n"; 
	    helpText += "<p><code>\":push\"</code> (or <code>\"push\"</code>\r\n"; 
	    helpText += "if used with the default gap size) can be added to the gap size to\r\n"; 
	    helpText += "make that gap greedy and try to take as much space as possible\r\n"; 
	    helpText += "without making the layout bigger than the container.\r\n"; 
	    helpText += "</p>\r\n"; 
	    helpText += "<p><strong>Note!</strong> <code>\"\"</code> is the same as\r\n"; 
	    helpText += "<code>\"[]\"</code> which is the same as <code>\"[pref]\"</code>\r\n"; 
	    helpText += "and <code>\"[min:pref:n]\"</code>.\r\n"; 
	    helpText += "</p>\r\n"; 
	    helpText += "<table width=\"100%\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\r\n"; 
	    helpText += "    <tbody><tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>sizegroup</u></strong></code><code> [</code><code><em>name</em></code><code>]<br></code><code><strong><u>sg</u></strong></code><code>\r\n"; 
	    helpText += "            [</code><code><em>name</em></code><code>]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Gives the row a size group name. All rows that share a size\r\n"; 
	    helpText += "            group name will get the same <strong>BoundSize</strong> as the row\r\n"; 
	    helpText += "            with the largest min/preferred size. This is most usable when the\r\n"; 
	    helpText += "            size of the row is not explicitly set and thus is determined by\r\n"; 
	    helpText += "            the largest component is the row(s). An empty name <code>\"\"</code>\r\n"; 
	    helpText += "            can be used unless there should be more than one group.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"sg\"<br>\"sg group1\"<br>\"sizegroup\r\n"; 
	    helpText += "            props\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>fill</u></strong></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Set the <em>default value for components </em>to <code>\"grow\"</code>\r\n"; 
	    helpText += "            in the dimension of the row. So for columns the components in that\r\n"; 
	    helpText += "            column will default to a <code>\"growx\"</code> constraint\r\n"; 
	    helpText += "            (which can be overridden by the individual component constraints).\r\n"; 
	    helpText += "            Note that this property does not affect the size for the row, but\r\n"; 
	    helpText += "            rather the sizes of the components in the row.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"fill\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>nogrid</u></strong></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Puts the row in flow-only mode. All components in the flow\r\n"; 
	    helpText += "            direction will be put in the same cell and will thus not be\r\n"; 
	    helpText += "            aligned with component in other rows/columns. This property will\r\n"; 
	    helpText += "            only be adhered to if the row is in the flow direction. So for the\r\n"; 
	    helpText += "            normal horizontal flow (<code>\"flowx\"</code>) it is only\r\n"; 
	    helpText += "            used for rows and for <code>\"flowy\"</code> it is only\r\n"; 
	    helpText += "            used for columns.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"nogrid\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>grow</u></strong></code><code> [</code><code><em>weight</em></code><code>]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Sets how keen the row should be to grow in relation to other\r\n"; 
	    helpText += "            rows. The weight (defaults to 100 if not specified) is purely a\r\n"; 
	    helpText += "            relative value to other rows' weight. Twice the weight will get\r\n"; 
	    helpText += "            double the extra space. If this constraint is not set, the grow\r\n"; 
	    helpText += "            weight is set to zero and the column will not grow (unless <code>\"fill\"</code>\r\n"; 
	    helpText += "            is set in the Layout Constraints and no other row has grow weight\r\n"; 
	    helpText += "            above zero either). Grow weight will only be compared to the\r\n"; 
	    helpText += "            weights for rows with the same grow priority. See below.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"grow 50\"<br>\"grow\" </code>\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>growprio</u></strong></code><code> </code><code><em>prio</em></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Sets the grow priority for the row (not for the components in\r\n"; 
	    helpText += "            the row). When growing, all rows with higher priorities will be\r\n"; 
	    helpText += "            grown to their maximum size before any row with lower priority are\r\n"; 
	    helpText += "            considered. The default grow priority is 100. This can be used to\r\n"; 
	    helpText += "            make certain rows grow to max before other rows even start to\r\n"; 
	    helpText += "            grow.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"growprio 50\" </code>\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>shrink</u></strong></code><code><em>weight</em></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Sets how keen/reluctant the row should be to shrink in relation\r\n"; 
	    helpText += "            to other rows. The weight is purely a relative value to other\r\n"; 
	    helpText += "            rows' weights. Twice the weight will shrink twice as much when\r\n"; 
	    helpText += "            space is scarce. If this constraint is not set the shrink weight\r\n"; 
	    helpText += "            defaults to 100, which means that all rows by default can shrink\r\n"; 
	    helpText += "            to their minimum size, but no less. Shrink weight will only be\r\n"; 
	    helpText += "            compared against the weights in the same shrink priority group\r\n"; 
	    helpText += "            (other rows with the same shrink priority). See below.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"shrink 50\"<br>\"shrinkweight 0\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>shrinkprio</u></strong></code><code> </code><code><em>prio</em></code><code><br></code><code><strong><u>shp</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>prio</em></code><code> </code>\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Sets the shrink priority for the row (not for the components in\r\n"; 
	    helpText += "            the row). When space is scarce and rows needs to be shrunk, all\r\n"; 
	    helpText += "            rows with higher priorities will be shrunk to their minimum size\r\n"; 
	    helpText += "            before any row with lower priority are considered. The default\r\n"; 
	    helpText += "            shrink priority is 100. This can be used to make certain rows\r\n"; 
	    helpText += "            shrink to min before other rows even start to shrink.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"shrinkprio 50\" <br>\"shp 110\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>align</u></strong></code><code> </code><code><em>align<br></em></code><code><strong><u>al</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>align</em></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Specifies the default alignment for the components in the row.\r\n"; 
	    helpText += "            This default alignment can be overridden by setting the alignment\r\n"; 
	    helpText += "            for the component in the Component Constraint. The default row\r\n"; 
	    helpText += "            alignment is <code>\"left\"</code> for columns and\r\n"; 
	    helpText += "            <code>\"center\"</code> for rows. The alignment can be\r\n"; 
	    helpText += "            specified as a <strong>UnitValue</strong> or <strong>AlignKeyword</strong>.\r\n"; 
	    helpText += "            See above. If <strong>AlignKeyword</strong> is used the <code>\"align\"</code>\r\n"; 
	    helpText += "            part can be omitted.<br>Note that baseline alignement does not\r\n"; 
	    helpText += "            work if the component can't get its preferred size in the vertical\r\n"; 
	    helpText += "            dimension.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"align 50%\"<br>\"align top\"<br>\"al\r\n"; 
	    helpText += "            leading\"<br>\"align 100px\"<br>\"top,\r\n"; 
	    helpText += "            left\"<br>\"align baseline\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>gap</u></strong></code><code> </code><code><em>gapbefore</em></code><code>\r\n"; 
	    helpText += "            [</code><code><em>gap</em></code><code>]</code><code><strong><u><br>gapbefore</u></strong></code><code><strong>\r\n"; 
	    helpText += "            </strong></code><code><em>gap</em></code><code><br></code><code><strong><u>gapafter</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>gap</em></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Specifies the gap before and/or after the row. The gap are\r\n"; 
	    helpText += "            specified between the row constraints (between <code>\"]\r\n"; 
	    helpText += "            [\"</code> ). <code>\"gapleft\", \"gapright\",\r\n"; 
	    helpText += "            \"gaptop\", \"gapbottom\"</code> can also be used.\r\n"; 
	    helpText += "                        </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"gap 10 20\"<br>\"gap 10:20:30\r\n"; 
	    helpText += "            <br>\r\n"; 
	    helpText += "            10px:20%:30in\"<br>\"gapbefore 10px, <br>gapafter\r\n"; 
	    helpText += "            20px\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "</tbody></table>\r\n"; 
	    helpText += "<h2>Component Constraints</h2>\r\n"; 
	    helpText += "<p>Component constraints are used as an argument in the\r\n"; 
	    helpText += "<code>Container.add(...)</code> for Swing and by setting it as\r\n"; 
	    helpText += "<code>Control.setLayoutData(...)</code> in SWT. It can be used to\r\n"; 
	    helpText += "specify constraints that has to do with the component's size and/or\r\n"; 
	    helpText += "the grid cell flow. The constraints are specified one by one with\r\n"; 
	    helpText += "comma signs as separators. <br><code>E.g. \"width 100px!, grid 3\r\n"; 
	    helpText += "2, wrap\"</code>.</p>\r\n"; 
	    helpText += "<table width=\"100%\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\r\n"; 
	    helpText += "    <tbody><tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>wrap </u></strong></code><code>[</code><code><em>gapsize</em></code><code>]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Wraps to a new column/row <strong>after</strong> the component\r\n"; 
	    helpText += "            has been put in the next available cell. This means that the <strong>next</strong>\r\n"; 
	    helpText += "            component will be put on the new row/column. Tip! Read wrap as\r\n"; 
	    helpText += "            \"wrap after\". If specified <code>\"gapsize\"</code>\r\n"; 
	    helpText += "            will override the size of the gap between the current and next row\r\n"; 
	    helpText += "            (or column if <code>\"flowy\"</code>). Note that the gaps\r\n"; 
	    helpText += "            size is <strong>after</strong> the row that this component will\r\n"; 
	    helpText += "            end up at.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"wrap\"<br>\"wrap 15px\"<br>\"wrap\r\n"; 
	    helpText += "            push\"<br>\"wrap 15:push\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>newline</u></strong></code><code> [</code><code><em>gapsize</em></code><code>]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Wraps to a new column/row <strong>before</strong> the component\r\n"; 
	    helpText += "            is put in the next available cell. This means that the <strong>this</strong>\r\n"; 
	    helpText += "            component will be put on a new row/column. Tip! Read wrap as \"on\r\n"; 
	    helpText += "            a newline\". If specified <code>\"gapsize\"</code>\r\n"; 
	    helpText += "            will override the size of the gap between the current and next row\r\n"; 
	    helpText += "            (or column if <code>\"flowy\"</code>). Note that the gaps\r\n"; 
	    helpText += "            size is <strong>before</strong> the row that this component will\r\n"; 
	    helpText += "            end up at.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"newline\"<br>\"newline 15px\"<br>\"newline\r\n"; 
	    helpText += "            push\" <br>\"newline 15:push\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>push</u></strong></code><code>\r\n"; 
	    helpText += "            [</code><code><em>weightx</em></code><code>][</code><code><em>weighty</em></code><code>]<br></code><code><strong><u>pushx\r\n"; 
	    helpText += "            </u></strong></code><code>[</code><code><em>weightx</em></code><code>]<br></code><code><strong><u>pushy</u></strong></code><code>\r\n"; 
	    helpText += "            [</code><code><em>weighty</em></code><code>]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Makes the row and/or column that the component is residing in\r\n"; 
	    helpText += "            grow with <code>\"weight\"</code>. This can be used\r\n"; 
	    helpText += "            instead of having a \"grow\" keyword in the column/row\r\n"; 
	    helpText += "            constraints.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"push\"<br>\"pushx 200\"<br>\"pushy\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>skip</u></strong></code><code> [</code><code><em>count</em></code><code>]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Skips a number of cells in the flow. This is used to jump over\r\n"; 
	    helpText += "            a number of cells before the next free cell is looked for. The\r\n"; 
	    helpText += "            skipping is done before this component is put in a cell and thus\r\n"; 
	    helpText += "            this cells is affected by it. <code>\"count\"</code>\r\n"; 
	    helpText += "            defaults to 1 if not specified.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"skip\"<br>\"skip 3\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>span</u></strong></code><code> [</code><code><em>countx</em></code><code>]\r\n"; 
	    helpText += "            [</code><code><em>county</em></code><code>]<br></code><code><strong><u>spany</u></strong></code><code>/</code><code><strong><u>sy</u></strong></code><code>\r\n"; 
	    helpText += "            [</code><code><em>count</em></code><code>]<br></code><code><strong><u>spanx</u></strong></code><code>/</code><code><strong><u>sx</u></strong></code><code>\r\n"; 
	    helpText += "            [</code><code><em>count</em></code><code>]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Spans the current cell (merges) over a number of cells.\r\n"; 
	    helpText += "            Practically this means that this cell and the <em>count</em>\r\n"; 
	    helpText += "            number of cells will be treated as one cell and the component can\r\n"; 
	    helpText += "            use the space that all these cells have. <em>count</em> defaults\r\n"; 
	    helpText += "            to a really high value which practically means <em>span to the end\r\n"; 
	    helpText += "            or the row/column</em>. Note that a cell can be spanned <strong>and</strong>\r\n"; 
	    helpText += "            split at the same time, so it can for instance be spanning 2 cells\r\n"; 
	    helpText += "            and split that space for three components. <code>\"span\"</code>\r\n"; 
	    helpText += "            for the first cell in a row is the same thing as setting <code>\"nogrid\"</code>\r\n"; 
	    helpText += "            in the row constraint.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"span\"<br>\"span 4\"<br>\"span 2\r\n"; 
	    helpText += "            2\"<br>\"spanx 10\"<br>\"spanx 2, spany 2\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>split</u></strong></code><code> [</code><code><em>count</em></code><code>]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Splits the cell in a number of sub cells. Basically this means\r\n"; 
	    helpText += "            that the next <code>count</code> number of components will be put\r\n"; 
	    helpText += "            in the same cell, next to each other with defait gaps. Only the first\r\n"; 
	    helpText += "            component in a cell can set the split, any subsequent <code>\"split\"</code>\r\n"; 
	    helpText += "            keywords in the cell will be ignored. <code>count</code> defaults\r\n"; 
	    helpText += "            to <em>infinite</em> if not specified, which means that <code>\"split\"</code>\r\n"; 
	    helpText += "            alone will put all subsequent components in the same cell. <code>\"skip\"</code>,\r\n"; 
	    helpText += "            <code>\"wrap\"</code> and <code>\"newline\"</code>\r\n"; 
	    helpText += "            will break out of the split cell. The latter two will move to a\r\n"; 
	    helpText += "            new row/column as usual. <code>\"skip\"</code> will skip\r\n"; 
	    helpText += "            out if the splitting and continue in the next cell.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"split\"<br>\"split 4\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>cell</u></strong></code><code> </code><code><em>col\r\n"; 
	    helpText += "            row</em></code><code> <br>[span x [span y]]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Sets the grid cell that the component should be placed in. If\r\n"; 
	    helpText += "            there are already components in the cell they will share the cell.\r\n"; 
	    helpText += "            If there are two integers specified they will be interpreted as\r\n"; 
	    helpText += "            absolute coordinates for the column and row. The flow will\r\n"; 
	    helpText += "            continue after this cell. How many cells that will be spanned is\r\n"; 
	    helpText += "            optional but may be specified. It is the same thing as using the\r\n"; 
	    helpText += "            <code>spanx</code> and <code>spany</code> keywords.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"cell 2 2\"<br>\"cell 1 1 2 2\" </code>\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>flowx</u></strong></code><code><br></code><code><strong><u>flowy</u></strong></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Sets the flow direction in the cell. By default the flow\r\n"; 
	    helpText += "            direction in the cell is the same as the flow direction for the\r\n"; 
	    helpText += "            layout. So if the components flows from left to right they will do\r\n"; 
	    helpText += "            so for in-cell flow as well. The first component added to a cell\r\n"; 
	    helpText += "            can change the cell flow. If flow direction is changed to <code>flowy</code>\r\n"; 
	    helpText += "            the components in the cell will be positioned above/under each\r\n"; 
	    helpText += "            other.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"flowy\"<br>\"flowx\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>w/width</u></strong></code><code><em>\r\n"; 
	    helpText += "            size</em></code><code><br></code><code><strong><u>h/height</u></strong></code><code><em>\r\n"; 
	    helpText += "            size</em></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Overrides the default size of the component that is set by the\r\n"; 
	    helpText += "            UI delegate or by the developer explicitly on the component. The\r\n"; 
	    helpText += "            size is specified as a <strong>BoundSize</strong>. See the <em>Common\r\n"; 
	    helpText += "            Argument Types</em> section above for an explanation. Note that\r\n"; 
	    helpText += "            expressions is supported and you can for instance set the size for\r\n"; 
	    helpText += "            a component with <code>\"width pref+10px\"</code> to make\r\n"; 
	    helpText += "            it 10 pixels larger than normal or <code>\"width max(100,\r\n"; 
	    helpText += "            10%)\"</code> to make it 10% of the container's width, but a\r\n"; 
	    helpText += "            maximum of 100 pixels.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>\"<code>width 10!\"<br>\"width 10\"<br>\"h\r\n"; 
	    helpText += "            10:20\"<br>\"height pref!\"<br>\"w\r\n"; 
	    helpText += "            min:100:pref\"<br>\"w100!,h100!\"<br>\"width\r\n"; 
	    helpText += "            visual.x2-pref\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>wmin/wmax</u></strong></code><code><em>\r\n"; 
	    helpText += "            x-size</em></code><code><br></code><code><strong><u>hmin/hmax</u></strong></code><code><em>\r\n"; 
	    helpText += "            y-size</em></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Overrides the default size of the component for minimum or\r\n"; 
	    helpText += "            maximum size that is set by the UI delegate or by the developer\r\n"; 
	    helpText += "            explicitly on the component. The size is specified as a <strong>BoundSize</strong>.\r\n"; 
	    helpText += "            See the <em>Common Argument Types</em> section above for an\r\n"; 
	    helpText += "            explanation. Note that expressions is supported and you can for\r\n"; 
	    helpText += "            instance set the size for a component with <code>\"wmin\r\n"; 
	    helpText += "            pref-10px\"</code> to make it no less than 10 pixels smaller\r\n"; 
	    helpText += "            than normal. These keywords are syntactic shorts for <code>\"width\r\n"; 
	    helpText += "            </code><code><em>size</em></code><code>:pref\"</code> or\r\n"; 
	    helpText += "            <code>\"width min:pref:</code><code><em>size</em></code><code>\"</code>\r\n"; 
	    helpText += "            with is exactly the same for minimum and maximum respectively.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>\"<code>wmin 10\"<br>\"hmax pref+100\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>grow</u></strong></code><code> [</code><code><em>weightx</em></code><code>]\r\n"; 
	    helpText += "            [</code><code><em>weighty</em></code><code>]<br></code><code><strong><u>growx</u></strong></code><code>\r\n"; 
	    helpText += "            [</code><code><em>weightx</em></code><code>]<br></code><code><strong><u>growy</u></strong></code><code>\r\n"; 
	    helpText += "            [</code><code><em>weighty</em></code><code>]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Sets how keen the component should be to grow in relation to\r\n"; 
	    helpText += "            other component in the same cell. The weight (defaults to 100 if\r\n"; 
	    helpText += "            not specified) is purely a relative value to other components'\r\n"; 
	    helpText += "            weight. Twice the weight will get double the extra space. If this\r\n"; 
	    helpText += "            constraint is not set the grow weight is set to 0 and the\r\n"; 
	    helpText += "            component will not grow (unless <code>fill</code> is set in the\r\n"; 
	    helpText += "            row/column in which case <code>\"grow 0\"</code> can be\r\n"; 
	    helpText += "            used to explicitly make it not grow). Grow weight will only be\r\n"; 
	    helpText += "            compared against the weights in the same grow priority group and\r\n"; 
	    helpText += "            for the same cell. See below.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"grow 50 20\"<br>\"growx\r\n"; 
	    helpText += "            50\"<br>\"grow\"<br>\"growx\"<br>\"growy\r\n"; 
	    helpText += "            0\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>growprio</u></strong></code><code>/</code><code><strong><u>gp</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>prio</em></code><code><strong><u><br>prowpriox</u></strong></code><code>/</code><code><strong><u>gpx</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>prio</em></code><code><strong><u><br>growprioy</u></strong></code><code>/</code><code><strong><u>gpy</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>prio</em></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Sets the grow priority for the component. When growing, all\r\n"; 
	    helpText += "            components with higher priorities will be grown to their maximum\r\n"; 
	    helpText += "            size before any component with lower priority are considered. The\r\n"; 
	    helpText += "            default grow priority is 100. This constraint can be used to make\r\n"; 
	    helpText += "            certain components grow to max before other components even start\r\n"; 
	    helpText += "            to grow.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"growprio 50 50\"<br>\"gp 110 90\"<br>\"gpx\r\n"; 
	    helpText += "            200\"<br>\"growpriox 200\"</code></p>     \r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>shrink</u></strong></code><code> </code><code><em><br>weightx\r\n"; 
	    helpText += "            [weighty] </em></code>\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Sets how keen/reluctant the component should be to shrink in\r\n"; 
	    helpText += "            relation to other components. The weight is purely a relative\r\n"; 
	    helpText += "            value to other components' weight. Twice the weight will shrink\r\n"; 
	    helpText += "            twice as much when space is scarce. If this constraint is not set\r\n"; 
	    helpText += "            the shrink weight defaults to 100, which means that all components\r\n"; 
	    helpText += "            by default can shrink to their minimum size, but no less. Shrink\r\n"; 
	    helpText += "            weight will only be compared against the weights in the same\r\n"; 
	    helpText += "            shrink priority group (other components with the same shrink\r\n"; 
	    helpText += "            priority). See below.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"shrink 50\"<br>\"shrink 50 50 \"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>shrinkprio</u></strong></code><code>/</code><code><strong><u>shp</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em><br>priox [prioy] <br></em></code><code><strong><u>shrinkpriox</u></strong></code><code>/</code><code><strong><u>shpx</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>priox</em></code><code><strong><u><br>shrinkprioy</u></strong></code><code>/</code><code><strong><u>shpy</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>prioy</em></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Sets the shrink priority for the component. When space is\r\n"; 
	    helpText += "            scarce and components needs be be shrunk, all components with\r\n"; 
	    helpText += "            higher priorities will be shrunk to their minimum size before any\r\n"; 
	    helpText += "            component with lower priority are considered. The default shrink\r\n"; 
	    helpText += "            priority is 100. This can be used to make certain components\r\n"; 
	    helpText += "            shrink to min before other even start to shrink.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"shrinkprio 50\"<br>\"shp 200 200\"<br>\"shpx\r\n"; 
	    helpText += "            110\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>sizegroup</u></strong></code><code>/</code><code><strong><u>sg</u></strong></code><code>\r\n"; 
	    helpText += "            [</code><code><em>name</em></code><code>]</code><code><strong><u><br>sizegroupx</u></strong></code><code>/</code><code><strong><u>sgx</u></strong></code><code>\r\n"; 
	    helpText += "            [</code><code><em>name</em></code><code>]<br></code><code><strong><u>sizegroupy</u></strong></code><code>/</code><code><strong><u>sgy</u></strong></code><code>\r\n"; 
	    helpText += "            [</code><code><em>name</em></code><code>]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Gives the component a size group name. All components that\r\n"; 
	    helpText += "            share a size group name will get the same <strong>BoundSize</strong>\r\n"; 
	    helpText += "            (min/preferred/max). It is used to make sure that all components\r\n"; 
	    helpText += "            in the same size group gets the same min/preferred/max size which\r\n"; 
	    helpText += "            is that of the largest component in the group. An empty name <code>\"\"</code>\r\n"; 
	    helpText += "            can be used.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"sg\"<br>\"sg group1\"<br>\"sizegroup\r\n"; 
	    helpText += "            props\"<br>\"sgx\"<br>\"sizegroupy gr     p1\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>endgroup</u></strong></code><code>/</code><code><strong><u>eg</u></strong></code><code>\r\n"; 
	    helpText += "            [</code><code><em>name</em></code><code>]</code><code><strong><u><br>endgroupx</u></strong></code><code>/</code><code><strong><u>egx</u></strong></code><code>\r\n"; 
	    helpText += "            [</code><code><em>name</em></code><code>]<br></code><code><strong><u>endgroupy</u></strong></code><code>/</code><code><strong><u>egy</u></strong></code><code>\r\n"; 
	    helpText += "            [</code><code><em>name</em></code><code>]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Gives the component an end group name and association. All\r\n"; 
	    helpText += "            components that share an end group name will get their\r\n"; 
	    helpText += "            right/bottom component side aligned. The right/bottom side will be\r\n"; 
	    helpText += "            that of the largest component in the group. If <code>\"eg\"</code>\r\n"; 
	    helpText += "            or <code>\"endgroup\"</code> is used and thus the\r\n"; 
	    helpText += "            dimension is not specified the current flow dimension will be used\r\n"; 
	    helpText += "            (see <code>\"flowx\"</code>). So <code>\"eg\"</code>\r\n"; 
	    helpText += "            will be the same as <code>\"egx\"</code> in the normal\r\n"; 
	    helpText += "            case. An empty name <code>\"\"</code> can be used.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"eg\"<br>\"eg group1\"<br>\"endgroup\r\n"; 
	    helpText += "            props\"<br>\"egx\"<br>\"endgroupy grp1\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>gap</u></strong></code><code> </code><code><em>left</em></code><code>\r\n"; 
	    helpText += "            [</code><code><em>right</em></code><code>] <br>[</code><code><em>top</em></code><code>]\r\n"; 
	    helpText += "            [</code><code><em>bottom</em></code><code>]<br></code><code><strong><u>gaptop</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>gap</em></code><code><strong><u><br>gapleft</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>gap</em></code><code><strong><u><br>gapbottom</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>gap</em></code><code><strong><u><br>gapright</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>gap</em></code><code><strong><u><br>gapbefore</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>gap</em></code><code><strong><u><br>gapafter</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>gap</em></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Specifies the gap between the components in the cell or to the\r\n"; 
	    helpText += "            cell edge depending on what is around this component. If a gap\r\n"; 
	    helpText += "            size is missing it is interpreted as <code>0px</code>. The gaps\r\n"; 
	    helpText += "            are specified as a <strong>BoundSize</strong>. See above.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"gap 5px 10px\"<br>\"gap unrel rel\"<br>\"gapx 10:20:50\"<br>\"gapy\r\n"; 
	    helpText += "            0:rel:null\"<br>\"gap 10! 10!\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>gap</u></strong></code><code>x </code><code><em>left</em></code><code>\r\n"; 
	    helpText += "            [</code><code><em>right</em></code><code>]<br></code><code><strong><u>gapy</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>top [bottom]</em></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Specifies the horizontal or vertical gap between the components\r\n"; 
	    helpText += "            in the cell or to the cell edge depending on what is around this\r\n"; 
	    helpText += "            component. If a gap size is missing it is interpreted as <code>0px</code>.\r\n"; 
	    helpText += "            The gaps are specified as a <strong>BoundSize</strong>. See above.\r\n"; 
	    helpText += "                        </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"gapx 5px 10px\"<br>\"gapy unrel rel\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>id</u></strong></code><code> [</code><code><em>groupid.</em></code><code>]\r\n"; 
	    helpText += "            id </code>\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Sets the id (or name) for the component. If the <code>id</code>\r\n"; 
	    helpText += "            is not specified the <code>ComponentWrapper.getLinkId()</code>\r\n"; 
	    helpText += "            value is used. This value will give the component a way to be\r\n"; 
	    helpText += "            referenced from other components. Two or more components may share\r\n"; 
	    helpText += "            the <code>group id</code> but the <code>id</code> should be unique\r\n"; 
	    helpText += "            within a layout. The value will be converted to lower case and are\r\n"; 
	    helpText += "            thus <strong>not</strong> case sensitive. There must not be a dot\r\n"; 
	    helpText += "            first or last in the value string.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"id button1\"<br>\"id grp1.b1\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>pos</u></strong></code><code> </code><code><em>x</em></code><code>\r\n"; 
	    helpText += "            </code><code><em>y</em></code><code> [</code><code><em>x2</em></code><code>]\r\n"; 
	    helpText += "            [</code><code><em>y2</em></code><code>]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Positions the component with absolute coordinates relative to\r\n"; 
	    helpText += "            the container. If this keyword is used the component will <strong>not</strong>\r\n"; 
	    helpText += "            be put in a grid cell and will thus not affect the flow in the\r\n"; 
	    helpText += "            grid. One of either<code>x</code>/<code>x2</code> and one of<code>y</code>/<code>y2</code>\r\n"; 
	    helpText += "            must not be <code>null</code>. The coordinate that is set to <code>null</code>\r\n"; 
	    helpText += "            will be placed so that the component get its preferred size in\r\n"; 
	    helpText += "            that dimension. Non-specified values will be set to <code>null</code>,\r\n"; 
	    helpText += "            so for instance <code>\"abs 50% 50%\"</code> is the same\r\n"; 
	    helpText += "            as <code>\"abs 50% 50% null null\"</code>. If the position\r\n"; 
	    helpText += "            and size can be determined without references to the parent\r\n"; 
	    helpText += "            containers size it will affect the preferred size of the\r\n"; 
	    helpText += "            container.<br>Example: <code>\"pos 50% 50% n n\" or \"pos\r\n"; 
	    helpText += "            0.5al 0.5al\" or \"pos 100px 200px\" or \"position\r\n"; 
	    helpText += "            n n 200 200\"</code>.</p>\r\n"; 
	    helpText += "            <p>Absolute positions can also links to other components' bounds\r\n"; 
	    helpText += "            using their <code>id</code>s or <code>groupId</code>s. It can even\r\n"; 
	    helpText += "            use expressions around these links. E.g. <code>\"pos\r\n"; 
	    helpText += "            (butt.x+indent) butt1.y2\"</code> will position the component\r\n"; 
	    helpText += "            directly under the component with id \"butt1\", indented\r\n"; 
	    helpText += "            slightly to the right. There are two special bounds that are\r\n"; 
	    helpText += "            always set. <code>\"container\"</code> are set to the\r\n"; 
	    helpText += "            bounds if the container and <code>\"visual\"</code> are\r\n"; 
	    helpText += "            set to the bounds of the container minus the specified insets. The\r\n"; 
	    helpText += "            coordinates that can be used for these links are:\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "            <ul>\r\n"; 
	    helpText += "                <li><p style=\"margin-bottom: 0in\"><strong>.x</strong> or <strong>.y</strong>\r\n"; 
	    helpText += "                - The top left coordinate of the referenced component's bounds\r\n"; 
	    helpText += "                </p>\r\n"; 
	    helpText += "                </li><li><p style=\"margin-bottom: 0in\"><strong>.x2</strong> or .<strong>y2</strong>\r\n"; 
	    helpText += "                - The lower right coordinate of the referenced component's bounds\r\n"; 
	    helpText += "                                </p>\r\n"; 
	    helpText += "                </li><li><p style=\"margin-bottom: 0in\"><strong>.w</strong> or <strong>.h</strong>\r\n"; 
	    helpText += "                - The current width and height of the referenced component.\r\n"; 
	    helpText += "                </p>\r\n"; 
	    helpText += "                </li><li><p><strong>.xpos</strong> or <strong>.ypos</strong> - The top\r\n"; 
	    helpText += "                left coordinate of the referenced component <strong>in screen\r\n"; 
	    helpText += "                coordinates</strong>.\r\n"; 
	    helpText += "                </p>\r\n"; 
	    helpText += "            </li></ul>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"pos (b1.x+b1.w/2)<br>(b1.y2+rel)\"<br><br>\"pos\r\n"; 
	    helpText += "            <br>(visual.x2-pref)<br>200\"<br><br>\"pos n b1.y\r\n"; 
	    helpText += "            <br>b1.x-rel b1.y2\"<br><br>\"pos 100 100 <br>200 200\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>x</u></strong></code><code> x <br></code><code><strong><u>x2</u></strong></code><code>\r\n"; 
	    helpText += "            x2 <br></code><code><strong><u>y</u></strong></code><code> y <br></code><code><strong><u>y2</u></strong></code><code>\r\n"; 
	    helpText += "            y2 </code>\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Used to position the start (x or y), end (x2 or y2) or both\r\n"; 
	    helpText += "            edges of a component in absolute coordinates. This is used for\r\n"; 
	    helpText += "            when a component is in a grid or dock and it for instance needs to\r\n"; 
	    helpText += "            be adjusted to align with something else or in some other way be\r\n"; 
	    helpText += "            positioned absolutely. The cell that the component is positioned\r\n"; 
	    helpText += "            in will not change size, neither will the grid. The x, y, x2 and\r\n"; 
	    helpText += "            y2 keywords are applied in the last stage and will therefore not\r\n"; 
	    helpText += "            affect other components in the grid or dock, unless they are\r\n"; 
	    helpText += "            explicitly linked to the bounds of the component. If the position\r\n"; 
	    helpText += "            and size can be determined without references to the parent\r\n"; 
	    helpText += "            containers size it will affect the preferred size of the\r\n"; 
	    helpText += "            container.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"x button1.x\"<br>\"x2 (visual.x2-50)1\"<br>\"x\r\n"; 
	    helpText += "            100, y 300\" </code>\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>dock</u></strong></code><code> (\"</code><code><em>north</em></code><code>\"\r\n"; 
	    helpText += "            \"</code><code><em>west</em></code><code>\"<br>\"</code><code><em>south</em></code><code>\"\r\n"; 
	    helpText += "            \"</code><code><em>east</em></code><code>\"</code>)<br>or<br><code><strong><u>north</u></strong></code><code><strong>/</strong></code><code><strong><u>west</u></strong></code><code><strong>/</strong></code><code><strong><u>south</u></strong></code><code><strong>/</strong></code><code><strong><u>east</u></strong></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Used for docking the component at an edge, or the center, of the container. Works much like <code>BorderLayout</code> except that there can be an arbitrary number of docking components. They get the docked space in the order they are added to the container and \"cuts that piece of\". The <code>\"dock\"</code> keyword can be omitted for all but <code>\"<em>center</em>\"</code> and is only there to use for clarity. The component will be put in special surrounding cells that spans the rest of the rows which means that the docking constraint can be combined with many other  constraints such as <code>padding</code>, <code>width</code>, <code>height</code> and <code>gap</code>.</p>\r\n"; 
	    helpText += "      </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"dock north\"<br>\"north\"<br>\"west,\r\n"; 
	    helpText += "            gap 5\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>pad</u></strong></code><code> </code><code><em>top\r\n"; 
	    helpText += "            [left]<br>[bottom] [right</em></code><em><code>]</code></em>\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Sets the padding for the component in absolute pixels. This is\r\n"; 
	    helpText += "            an absolute adjustment of the bounds if the component and is done\r\n"; 
	    helpText += "            at the last stage in the layout process. This means it will not\r\n"; 
	    helpText += "            affect gaps or cell size or move other components. It can be used\r\n"; 
	    helpText += "            to compensate for something that for some reason is hard to do\r\n"; 
	    helpText += "            with the other constraints. For instance <code>\"ins -5 -5 5\r\n"; 
	    helpText += "            5\"</code> will enlarge the component five pixels in all\r\n"; 
	    helpText += "            directions making it 10 pixels taller and wider. If values are\r\n"; 
	    helpText += "            omitted they will be set to 0. <br><strong>Note!</strong> Padding\r\n"; 
	    helpText += "            multi-line components derived from <code>JTextComponent</code>\r\n"; 
	    helpText += "            (such as <code>JTextArea</code>) without setting a explicit\r\n"; 
	    helpText += "            minimum size may result in an continuous size escalation\r\n"; 
	    helpText += "            (animated!). This is not a bug in the layout manager but a\r\n"; 
	    helpText += "            \"feature\" derived from how these components calculates\r\n"; 
	    helpText += "            their minimum size. If the size is padded so that it increases by\r\n"; 
	    helpText += "            one pixel, the text component will automatically issue a\r\n"; 
	    helpText += "            revalidation and the layout cycle will restart, now with a the\r\n"; 
	    helpText += "            newly increased size as the new <strong>minimum</strong> size.\r\n"; 
	    helpText += "            This will continue until the maximum size is reached. This only\r\n"; 
	    helpText += "            happens for components that have \"line wrap\" set to\r\n"; 
	    helpText += "            <code>true</code>.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"padding 10 10\"<br>\"pad 5 5 -5 -5\"<br>\"pad\r\n"; 
	    helpText += "            0 0 1 1\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>al</u></strong></code><code>/</code><code><strong><u>align</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>alignx</em></code><code> [</code><code><em>aligny</em></code><code>]<br></code><code><strong><u>alignx</u></strong></code><code>/</code><code><strong><u>ax</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>alignx</em></code><code><strong><u><br>aligny</u></strong></code><code>/</code><code><strong><u>ay</u></strong></code><code>\r\n"; 
	    helpText += "            </code><code><em>aligny</em></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Specifies the alignment for the component if the cell is larger\r\n"; 
	    helpText += "            than the component plus its gaps. The alignment can be specified\r\n"; 
	    helpText += "            as a <strong>UnitValue</strong> or <strong>AlignKeyword</strong>.\r\n"; 
	    helpText += "            See above. If <strong>AlignKeyword</strong> is used the <code>\"align\"</code>\r\n"; 
	    helpText += "            keyword can be omitted. In a cell where there is more than one\r\n"; 
	    helpText += "            component, the first component can set the alignment for all the\r\n"; 
	    helpText += "            components. It is not possible to for instance set the first\r\n"; 
	    helpText += "            component to be left aligned and the second to be right aligned\r\n"; 
	    helpText += "            and thus get a gap between them. That effect can better be\r\n"; 
	    helpText += "            accomplished by setting a gap between the components that have a\r\n"; 
	    helpText += "            minimum size and a large preferred size.<br>Note that baseline\r\n"; 
	    helpText += "            alignement does not work if the component can't get its preferred\r\n"; 
	    helpText += "            size in the vertical dimension.</p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"align 50% 50%\"<br>\"aligny top\"<br>\"alignx\r\n"; 
	    helpText += "            leading\"<br>\"align 100px\"<br>\"top,\r\n"; 
	    helpText += "            left\"<br>\"aligny baseline\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>external</u></strong></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Inhibits MigLayout to change the bounds for the component. The\r\n"; 
	    helpText += "            bounds should be handled/set from code outside this layout manager\r\n"; 
	    helpText += "            by calling the <code>setBounds(..)</code> (or equivalent depending\r\n"; 
	    helpText += "            on the GUI toolkit used) directly on the component. This\r\n"; 
	    helpText += "            component's bounds can still be linked to by other components if\r\n"; 
	    helpText += "            it has an <code>\"id\"</code> tag, or a link id is\r\n"; 
	    helpText += "            provided by the <code>ComponentWrapper</code>. This is a very\r\n"; 
	    helpText += "            simple and powerful way to extend the usages for MigLayout and\r\n"; 
	    helpText += "            reduce the number of times a custom layout manager has to be\r\n"; 
	    helpText += "            written. Normal application code can be used to set the bounds,\r\n"; 
	    helpText += "            something that can't be done with any other layout managers.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"external\"<br>\"external,id butt\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>hidemode</u></strong></code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Sets the hide mode for the component. If the hide mode has been\r\n"; 
	    helpText += "            specified in the This hide mode can be overridden by the component\r\n"; 
	    helpText += "            constraint. The hide mode specified how the layout manager should\r\n"; 
	    helpText += "            handle a component that isn't visible. The modes are:<br><code>0</code>\r\n"; 
	    helpText += "            - Default. Means that invisible components will be handled exactly\r\n"; 
	    helpText += "            as if they were visible.<br><code>1</code> - The size of the\r\n"; 
	    helpText += "            component (if invisible) will be set to <code>0, 0</code>.<br><code>2</code>\r\n"; 
	    helpText += "            - The size of the component (if invisible) will be set to <code>0,\r\n"; 
	    helpText += "            0</code> and the gaps will also be set to <code>0</code> around\r\n"; 
	    helpText += "            it.<br><code>3</code> - Invisible components will not participate\r\n"; 
	    helpText += "            in the layout at all and it will for instance not take up a grid\r\n"; 
	    helpText += "            cell.\r\n"; 
	    helpText += "            </p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"hidemode 1\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "    <tr valign=\"TOP\">\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code><strong><u>tag</u></strong></code><code> [</code><code><em>name</em></code><code>]</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p>Tags the component with metadata name that can be used by the\r\n"; 
	    helpText += "            layout engine. The tag can be used to explain for the layout\r\n"; 
	    helpText += "            manager what the components is showing, such as an <strong>OK</strong>\r\n"; 
	    helpText += "            or <strong>Cancel</strong> button. Unknown tags will be\r\n"; 
	    helpText += "            disregarded without error or any indication.<br>Currently the\r\n"; 
	    helpText += "            recognized tags are used for button reordering on a per platform\r\n"; 
	    helpText += "            basis. See the JavaDoc for <code>PlatformConverter.getButtonBarOrder(int\r\n"; 
	    helpText += "            type)</code> for a longer explanation. <br>The supported tags are:</p>\r\n"; 
	    helpText += "            <ul>\r\n"; 
	    helpText += "                <li><p style=\"margin-bottom: 0in\"><strong>ok</strong> - An OK\r\n"; 
	    helpText += "                button.\r\n"; 
	    helpText += "                </p>\r\n"; 
	    helpText += "                </li><li><p style=\"margin-bottom: 0in\"><strong>cancel</strong> - A\r\n"; 
	    helpText += "                Cancel button.\r\n"; 
	    helpText += "                </p>\r\n"; 
	    helpText += "                </li><li><p style=\"margin-bottom: 0in\"><strong>help</strong> - Help\r\n"; 
	    helpText += "                button that is normally on the right.\r\n"; 
	    helpText += "                </p>\r\n"; 
	    helpText += "                </li><li><p style=\"margin-bottom: 0in\"><strong>help2</strong> - Help\r\n"; 
	    helpText += "                button that on some platforms is placed to the left.\r\n"; 
	    helpText += "                </p>\r\n"; 
	    helpText += "                </li><li><p style=\"margin-bottom: 0in\"><strong>yes</strong> - A Yes\r\n"; 
	    helpText += "                button.\r\n"; 
	    helpText += "                </p>\r\n"; 
	    helpText += "                </li><li><p style=\"margin-bottom: 0in\"><strong>no</strong> - A No\r\n"; 
	    helpText += "                button.\r\n"; 
	    helpText += "                </p>\r\n"; 
	    helpText += "                </li><li><p style=\"margin-bottom: 0in\"><strong>apply</strong> - An\r\n"; 
	    helpText += "                Apply button.\r\n"; 
	    helpText += "                </p>\r\n"; 
	    helpText += "                </li><li><p style=\"margin-bottom: 0in\"><strong>next</strong> - A Next\r\n"; 
	    helpText += "                or Forward button.\r\n"; 
	    helpText += "                </p>\r\n"; 
	    helpText += "                </li><li><p style=\"margin-bottom: 0in\"><strong>back</strong> - A\r\n"; 
	    helpText += "                Previous or Back button.\r\n"; 
	    helpText += "                </p>\r\n"; 
	    helpText += "                </li><li><p style=\"margin-bottom: 0in\"><strong>finish</strong> - A\r\n"; 
	    helpText += "                Finished button.\r\n"; 
	    helpText += "                </p>\r\n"; 
	    helpText += "                </li><li><p style=\"margin-bottom: 0in\"><strong>left</strong> - A\r\n"; 
	    helpText += "                button that should normally always be placed on the far left.\r\n"; 
	    helpText += "                </p>\r\n"; 
	    helpText += "                </li><li><p><strong>right</strong> - A button that should normally\r\n"; 
	    helpText += "                always be placed on the far right.\r\n"; 
	    helpText += "                </p>\r\n"; 
	    helpText += "            </li></ul>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "        <td>\r\n"; 
	    helpText += "            <p><code>\"tag ok\"<br>\"tag help2\"</code></p>\r\n"; 
	    helpText += "        </td>\r\n"; 
	    helpText += "    </tr>\r\n"; 
	    helpText += "</tbody></table>\r\n"; 
	    helpText += "<p><br><br>\r\n"; 
	    helpText += "</p>\r\n"; 
	    helpText += "\r\n"; 
	    helpText += "</body></html>";
	}
	
	public static void main(String[] args) {
	    MiGLayoutXmlPropertyEditor xp = new MiGLayoutXmlPropertyEditor();

	    GuiUtils.testFrame(xp.button);
	}
}
